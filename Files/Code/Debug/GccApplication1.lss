
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000009f8  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000a2  008000a2  00000ace  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001339  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073d  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7f  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00003094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5e  00000000  00000000  00003581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000043df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  8a:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Command>:
	if (r == 0 && position<16)
	Command((position & 0x0F)|0x80);
	else if (r == 1 && position<16)
	Command((position & 0x0F)|0xC0);
	LCDStr(str);
}
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
  9e:	db 98       	cbi	0x1b, 3	; 27
  a0:	da 9a       	sbi	0x1b, 2	; 27
  a2:	32 e0       	ldi	r19, 0x02	; 2
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Command+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <Command+0x18>
  aa:	da 98       	cbi	0x1b, 2	; 27
  ac:	ef e8       	ldi	r30, 0x8F	; 143
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <Command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <Command+0x24>
  b6:	00 00       	nop
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	da 9a       	sbi	0x1b, 2	; 27
  ca:	32 e0       	ldi	r19, 0x02	; 2
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <Command+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <Command+0x40>
  d2:	da 98       	cbi	0x1b, 2	; 27
  d4:	8f e9       	ldi	r24, 0x9F	; 159
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <Command+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <Command+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCDCHARACTER>:
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	9b bb       	out	0x1b, r25	; 27
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	da 9a       	sbi	0x1b, 2	; 27
  f2:	32 e0       	ldi	r19, 0x02	; 2
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDCHARACTER+0x12>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCDCHARACTER+0x18>
  fa:	da 98       	cbi	0x1b, 2	; 27
  fc:	ef e8       	ldi	r30, 0x8F	; 143
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCDCHARACTER+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCDCHARACTER+0x24>
 106:	00 00       	nop
 108:	2b b3       	in	r18, 0x1b	; 27
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b bb       	out	0x1b, r24	; 27
 118:	da 9a       	sbi	0x1b, 2	; 27
 11a:	32 e0       	ldi	r19, 0x02	; 2
 11c:	3a 95       	dec	r19
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDCHARACTER+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDCHARACTER+0x40>
 122:	da 98       	cbi	0x1b, 2	; 27
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDCHARACTER+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCDCHARACTER+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCDStr>:
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	88 81       	ld	r24, Y
 13a:	88 23       	and	r24, r24
 13c:	31 f0       	breq	.+12     	; 0x14a <LCDStr+0x18>
 13e:	21 96       	adiw	r28, 0x01	; 1
 140:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 144:	89 91       	ld	r24, Y+
 146:	81 11       	cpse	r24, r1
 148:	fb cf       	rjmp	.-10     	; 0x140 <LCDStr+0xe>
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <table>:
	_delay_ms(2);
}

void table(int digit)
{
	if (digit < 10) LCDCHARACTER(digit + 48);
 150:	8a 30       	cpi	r24, 0x0A	; 10
 152:	91 05       	cpc	r25, r1
 154:	24 f4       	brge	.+8      	; 0x15e <table+0xe>
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 15c:	08 95       	ret
	else if (digit == 10) LCDCHARACTER('A');
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	91 05       	cpc	r25, r1
 162:	21 f4       	brne	.+8      	; 0x16c <table+0x1c>
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 16a:	08 95       	ret
	else if (digit == 11) LCDCHARACTER('B');
 16c:	8b 30       	cpi	r24, 0x0B	; 11
 16e:	91 05       	cpc	r25, r1
 170:	21 f4       	brne	.+8      	; 0x17a <table+0x2a>
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 178:	08 95       	ret
	else if (digit == 12) LCDCHARACTER('C');
 17a:	8c 30       	cpi	r24, 0x0C	; 12
 17c:	91 05       	cpc	r25, r1
 17e:	21 f4       	brne	.+8      	; 0x188 <table+0x38>
 180:	83 e4       	ldi	r24, 0x43	; 67
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 186:	08 95       	ret
	else if (digit == 13) LCDCHARACTER('D');
 188:	8d 30       	cpi	r24, 0x0D	; 13
 18a:	91 05       	cpc	r25, r1
 18c:	21 f4       	brne	.+8      	; 0x196 <table+0x46>
 18e:	84 e4       	ldi	r24, 0x44	; 68
 190:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 194:	08 95       	ret
	else if (digit == 14) LCDCHARACTER('E');
 196:	8e 30       	cpi	r24, 0x0E	; 14
 198:	91 05       	cpc	r25, r1
 19a:	21 f4       	brne	.+8      	; 0x1a4 <table+0x54>
 19c:	85 e4       	ldi	r24, 0x45	; 69
 19e:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 1a2:	08 95       	ret
	else if (digit == 15) LCDCHARACTER('F');
 1a4:	0f 97       	sbiw	r24, 0x0f	; 15
 1a6:	19 f4       	brne	.+6      	; 0x1ae <table+0x5e>
 1a8:	86 e4       	ldi	r24, 0x46	; 70
 1aa:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 1ae:	08 95       	ret

000001b0 <Clear>:
}


void Clear()
{
	Command (0x01);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Clear+0xa>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Clear+0x10>
 1c0:	00 00       	nop
	_delay_ms(2);
	Command (0x80);
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <Command>
 1c8:	08 95       	ret

000001ca <Timer>:
}

void Timer(void)
{
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	int Check = 1;
	int  Minute = 0, Second = 0;
	Clear();
 1dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
	LCDStr("Timer Mode :");
 1e0:	84 e6       	ldi	r24, 0x64	; 100
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	Command(0xC0);
 1e8:	80 ec       	ldi	r24, 0xC0	; 192
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	LCDStr("00:00");
 1ee:	81 e7       	ldi	r24, 0x71	; 113
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
}

void Timer(void)
{
	int Check = 1;
	int  Minute = 0, Second = 0;
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	10 e0       	ldi	r17, 0x00	; 0
	while(Check != 0)
	{
		Command(0xC0);
		Second = Second + 1;
		_delay_ms(78);
		Minute = Minute + Second / 60;
 1fe:	0f 2e       	mov	r0, r31
 200:	fc e3       	ldi	r31, 0x3C	; 60
 202:	cf 2e       	mov	r12, r31
 204:	d1 2c       	mov	r13, r1
 206:	f0 2d       	mov	r31, r0
		Second = Second % 60;
		Minute = Minute % 60;
		LCDCHARACTER(48 + Minute / 10);
 208:	0f 2e       	mov	r0, r31
 20a:	fa e0       	ldi	r31, 0x0A	; 10
 20c:	ef 2e       	mov	r14, r31
 20e:	f1 2c       	mov	r15, r1
 210:	f0 2d       	mov	r31, r0
	LCDStr("Timer Mode :");
	Command(0xC0);
	LCDStr("00:00");
	while(Check != 0)
	{
		Command(0xC0);
 212:	80 ec       	ldi	r24, 0xC0	; 192
 214:	0e 94 49 00 	call	0x92	; 0x92 <Command>
		Second = Second + 1;
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	2f e7       	ldi	r18, 0x7F	; 127
 21e:	37 ee       	ldi	r19, 0xE7	; 231
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	21 50       	subi	r18, 0x01	; 1
 224:	30 40       	sbci	r19, 0x00	; 0
 226:	40 40       	sbci	r20, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <Timer+0x58>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <Timer+0x62>
 22c:	00 00       	nop
		_delay_ms(78);
		Minute = Minute + Second / 60;
 22e:	b6 01       	movw	r22, r12
 230:	0e 94 13 04 	call	0x826	; 0x826 <__divmodhi4>
 234:	60 0f       	add	r22, r16
 236:	71 1f       	adc	r23, r17
		Second = Second % 60;
 238:	c8 2f       	mov	r28, r24
 23a:	d9 2f       	mov	r29, r25
		Minute = Minute % 60;
 23c:	cb 01       	movw	r24, r22
 23e:	b6 01       	movw	r22, r12
 240:	0e 94 13 04 	call	0x826	; 0x826 <__divmodhi4>
 244:	8c 01       	movw	r16, r24
		LCDCHARACTER(48 + Minute / 10);
 246:	b7 01       	movw	r22, r14
 248:	0e 94 13 04 	call	0x826	; 0x826 <__divmodhi4>
 24c:	b8 2e       	mov	r11, r24
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	86 0f       	add	r24, r22
 252:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
		LCDCHARACTER(48 + Minute % 10);
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	8b 0d       	add	r24, r11
 25a:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
		LCDCHARACTER(':');
 25e:	8a e3       	ldi	r24, 0x3A	; 58
 260:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
		LCDCHARACTER(48 + Second / 10);
 264:	ce 01       	movw	r24, r28
 266:	b7 01       	movw	r22, r14
 268:	0e 94 13 04 	call	0x826	; 0x826 <__divmodhi4>
 26c:	b8 2e       	mov	r11, r24
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	86 0f       	add	r24, r22
 272:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
		LCDCHARACTER(48 + Second % 10);
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	8b 0d       	add	r24, r11
 27a:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
		if (Minute == 16) Check = 0;
 27e:	00 31       	cpi	r16, 0x10	; 16
 280:	11 05       	cpc	r17, r1
 282:	09 f4       	brne	.+2      	; 0x286 <Timer+0xbc>
 284:	5f c0       	rjmp	.+190    	; 0x344 <Timer+0x17a>
 286:	8f ec       	ldi	r24, 0xCF	; 207
 288:	97 e0       	ldi	r25, 0x07	; 7
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <Timer+0xc0>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <Timer+0xc6>
 290:	00 00       	nop
 292:	bf cf       	rjmp	.-130    	; 0x212 <Timer+0x48>
	}
	Clear();
	for( int i = 0 ; i < 3 ; i++)
	{
		int digit1,digit0;
		PORTD = rand()%256;
 294:	0e 94 87 04 	call	0x90e	; 0x90e <rand>
 298:	90 78       	andi	r25, 0x80	; 128
 29a:	99 23       	and	r25, r25
 29c:	1c f4       	brge	.+6      	; 0x2a4 <Timer+0xda>
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	9f 6f       	ori	r25, 0xFF	; 255
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	82 bb       	out	0x12, r24	; 18
		LCDStr("0x");
 2a6:	87 e7       	ldi	r24, 0x77	; 119
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
		digit0 = PORTD % 0x10;
 2ae:	c2 b3       	in	r28, 0x12	; 18
		digit1 = PORTD / 0x10;
 2b0:	82 b3       	in	r24, 0x12	; 18
		table(digit1);
 2b2:	82 95       	swap	r24
 2b4:	8f 70       	andi	r24, 0x0F	; 15
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 a8 00 	call	0x150	; 0x150 <table>
		table(digit0);
 2bc:	8c 2f       	mov	r24, r28
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 a8 00 	call	0x150	; 0x150 <table>
		LCDCHARACTER(' ');
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	29 e6       	ldi	r18, 0x69	; 105
 2d0:	38 e1       	ldi	r19, 0x18	; 24
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	30 40       	sbci	r19, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <Timer+0x108>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <Timer+0x112>
 2dc:	00 00       	nop
 2de:	01 50       	subi	r16, 0x01	; 1
 2e0:	11 09       	sbc	r17, r1
		LCDCHARACTER(48 + Second % 10);
		if (Minute == 16) Check = 0;
		_delay_ms(1);
	}
	Clear();
	for( int i = 0 ; i < 3 ; i++)
 2e2:	c1 f6       	brne	.-80     	; 0x294 <Timer+0xca>
		table(digit1);
		table(digit0);
		LCDCHARACTER(' ');
		_delay_ms(1000);
	}
	Command(0xC0);
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <Command>
 2ea:	03 e0       	ldi	r16, 0x03	; 3
 2ec:	10 e0       	ldi	r17, 0x00	; 0
	for( int i = 0 ; i < 3 ; i++)
	{
		int digit1,digit0;
		PORTD = rand()%256;
 2ee:	0e 94 87 04 	call	0x90e	; 0x90e <rand>
 2f2:	90 78       	andi	r25, 0x80	; 128
 2f4:	99 23       	and	r25, r25
 2f6:	1c f4       	brge	.+6      	; 0x2fe <Timer+0x134>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	9f 6f       	ori	r25, 0xFF	; 255
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	82 bb       	out	0x12, r24	; 18
		LCDStr("0x");
 300:	87 e7       	ldi	r24, 0x77	; 119
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
		digit0 = PORTD % 0x10;
 308:	c2 b3       	in	r28, 0x12	; 18
		digit1 = PORTD / 0x10;
 30a:	82 b3       	in	r24, 0x12	; 18
		table(digit1);
 30c:	82 95       	swap	r24
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 a8 00 	call	0x150	; 0x150 <table>
		table(digit0);
 316:	8c 2f       	mov	r24, r28
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 a8 00 	call	0x150	; 0x150 <table>
		LCDCHARACTER(' ');
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 326:	4f ef       	ldi	r20, 0xFF	; 255
 328:	89 e6       	ldi	r24, 0x69	; 105
 32a:	98 e1       	ldi	r25, 0x18	; 24
 32c:	41 50       	subi	r20, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <Timer+0x162>
 334:	00 c0       	rjmp	.+0      	; 0x336 <Timer+0x16c>
 336:	00 00       	nop
 338:	01 50       	subi	r16, 0x01	; 1
 33a:	11 09       	sbc	r17, r1
		table(digit0);
		LCDCHARACTER(' ');
		_delay_ms(1000);
	}
	Command(0xC0);
	for( int i = 0 ; i < 3 ; i++)
 33c:	c1 f6       	brne	.-80     	; 0x2ee <Timer+0x124>
		table(digit1);
		table(digit0);
		LCDCHARACTER(' ');
		_delay_ms(1000);
	}
	main();
 33e:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
}
 342:	0b c0       	rjmp	.+22     	; 0x35a <Timer+0x190>
 344:	8f ec       	ldi	r24, 0xCF	; 207
 346:	97 e0       	ldi	r25, 0x07	; 7
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <Timer+0x17e>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <Timer+0x184>
 34e:	00 00       	nop
		LCDCHARACTER(48 + Second / 10);
		LCDCHARACTER(48 + Second % 10);
		if (Minute == 16) Check = 0;
		_delay_ms(1);
	}
	Clear();
 350:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
 354:	03 e0       	ldi	r16, 0x03	; 3
 356:	10 e0       	ldi	r17, 0x00	; 0
 358:	9d cf       	rjmp	.-198    	; 0x294 <Timer+0xca>
		table(digit0);
		LCDCHARACTER(' ');
		_delay_ms(1000);
	}
	main();
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	08 95       	ret

0000036e <main>:
void LCDCHARACTER( unsigned char DATA );
int Ki, Kdt, Kd,Kpt, Kp, Kit ;

int main()
{
	DDRA = 0xFC;
 36e:	8c ef       	ldi	r24, 0xFC	; 252
 370:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xF0;
 372:	90 ef       	ldi	r25, 0xF0	; 240
 374:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFF;
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	94 bb       	out	0x14, r25	; 20
	DDRD = 0xFF;
 37a:	91 bb       	out	0x11, r25	; 17
	ADMUX  = 0xC0;
 37c:	90 ec       	ldi	r25, 0xC0	; 192
 37e:	97 b9       	out	0x07, r25	; 7
	ADCSRA = 0x87;
 380:	97 e8       	ldi	r25, 0x87	; 135
 382:	96 b9       	out	0x06, r25	; 6
	DDRA = 0xFC;
 384:	8a bb       	out	0x1a, r24	; 26
 386:	8f e3       	ldi	r24, 0x3F	; 63
 388:	9c e9       	ldi	r25, 0x9C	; 156
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x1c>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x22>
 390:	00 00       	nop
	_delay_ms(20);
	Command(0x02);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Command(0x28);
 398:	88 e2       	ldi	r24, 0x28	; 40
 39a:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Command(0x0c);
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Command(0x06);
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Command(0x01);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <Command>
 3b0:	ef e9       	ldi	r30, 0x9F	; 159
 3b2:	ff e0       	ldi	r31, 0x0F	; 15
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x46>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x4c>
 3ba:	00 00       	nop
	_delay_ms(2);
	Clear();
 3bc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
	LCDStr("Kp :");
 3c0:	8a e7       	ldi	r24, 0x7A	; 122
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	Command(0xC0);
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Kpt = keyboard();
 3ce:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x1>
 3d8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
	Kp  = keyboard() + Kpt*10;
 3dc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 3e0:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__data_end>
 3e4:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__data_end+0x1>
 3e8:	a9 01       	movw	r20, r18
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	22 0f       	add	r18, r18
 3f4:	33 1f       	adc	r19, r19
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	24 0f       	add	r18, r20
 3fc:	35 1f       	adc	r19, r21
 3fe:	28 0f       	add	r18, r24
 400:	31 1d       	adc	r19, r1
 402:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <Kp+0x1>
 406:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <Kp>
	Clear();
 40a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
	LCDStr("Ki :");
 40e:	8f e7       	ldi	r24, 0x7F	; 127
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	Command(0xC0);
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Kit = keyboard();
 41c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <Kit+0x1>
 426:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Kit>
	Ki  = keyboard() + Kit*10;
 42a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 42e:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <Kit>
 432:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <Kit+0x1>
 436:	a9 01       	movw	r20, r18
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	24 0f       	add	r18, r20
 44a:	35 1f       	adc	r19, r21
 44c:	28 0f       	add	r18, r24
 44e:	31 1d       	adc	r19, r1
 450:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <Ki+0x1>
 454:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <Ki>
	Clear();
 458:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
	LCDStr("Kd :");
 45c:	84 e8       	ldi	r24, 0x84	; 132
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	Command(0xC0);
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	Kdt = keyboard();
 46a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <Kdt+0x1>
 474:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Kdt>
	Kd  = keyboard() + Kdt*10;
 478:	0e 94 68 03 	call	0x6d0	; 0x6d0 <keyboard>
 47c:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <Kdt>
 480:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <Kdt+0x1>
 484:	a9 01       	movw	r20, r18
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	24 0f       	add	r18, r20
 498:	35 1f       	adc	r19, r21
 49a:	28 0f       	add	r18, r24
 49c:	31 1d       	adc	r19, r1
 49e:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <Kd+0x1>
 4a2:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <Kd>
	Clear();
 4a6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Clear>
	LCDStr("PID Control :");
 4aa:	89 e8       	ldi	r24, 0x89	; 137
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	Command(0xC0);
 4b2:	80 ec       	ldi	r24, 0xC0	; 192
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <Command>
	LCDStr("P=");
 4b8:	87 e9       	ldi	r24, 0x97	; 151
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	LCDCHARACTER(48 + Kpt);
 4c0:	c2 ea       	ldi	r28, 0xA2	; 162
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
 4c4:	88 81       	ld	r24, Y
 4c6:	80 5d       	subi	r24, 0xD0	; 208
 4c8:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
	LCDCHARACTER(48 + Kp - 10*Kpt);
 4cc:	88 81       	ld	r24, Y
 4ce:	88 0f       	add	r24, r24
 4d0:	98 2f       	mov	r25, r24
 4d2:	99 0f       	add	r25, r25
 4d4:	99 0f       	add	r25, r25
 4d6:	89 0f       	add	r24, r25
 4d8:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <Kp>
 4dc:	90 5d       	subi	r25, 0xD0	; 208
 4de:	98 1b       	sub	r25, r24
 4e0:	89 2f       	mov	r24, r25
 4e2:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
	LCDStr(",I=");
 4e6:	8a e9       	ldi	r24, 0x9A	; 154
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	LCDCHARACTER(48 + Kit);
 4ee:	c8 ea       	ldi	r28, 0xA8	; 168
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	88 81       	ld	r24, Y
 4f4:	80 5d       	subi	r24, 0xD0	; 208
 4f6:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
	LCDCHARACTER(48 + Ki - 10*Kit);
 4fa:	88 81       	ld	r24, Y
 4fc:	88 0f       	add	r24, r24
 4fe:	98 2f       	mov	r25, r24
 500:	99 0f       	add	r25, r25
 502:	99 0f       	add	r25, r25
 504:	89 0f       	add	r24, r25
 506:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <Ki>
 50a:	90 5d       	subi	r25, 0xD0	; 208
 50c:	98 1b       	sub	r25, r24
 50e:	89 2f       	mov	r24, r25
 510:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
	LCDStr(",D=");
 514:	8e e9       	ldi	r24, 0x9E	; 158
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 99 00 	call	0x132	; 0x132 <LCDStr>
	LCDCHARACTER(48 + Kdt);
 51c:	c6 ea       	ldi	r28, 0xA6	; 166
 51e:	d0 e0       	ldi	r29, 0x00	; 0
 520:	88 81       	ld	r24, Y
 522:	80 5d       	subi	r24, 0xD0	; 208
 524:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
	LCDCHARACTER(48 + Kd - 10*Kdt);
 528:	88 81       	ld	r24, Y
 52a:	88 0f       	add	r24, r24
 52c:	98 2f       	mov	r25, r24
 52e:	99 0f       	add	r25, r25
 530:	99 0f       	add	r25, r25
 532:	89 0f       	add	r24, r25
 534:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Kd>
 538:	90 5d       	subi	r25, 0xD0	; 208
 53a:	98 1b       	sub	r25, r24
 53c:	89 2f       	mov	r24, r25
 53e:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>

	int P1 = 0, I0 = 0, I1 = 0, D0 = 0, D1 = 0;
	int ADCOut0 = 0, ADCOut1 = 0;
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
	LCDCHARACTER(48 + Ki - 10*Kit);
	LCDStr(",D=");
	LCDCHARACTER(48 + Kdt);
	LCDCHARACTER(48 + Kd - 10*Kdt);

	int P1 = 0, I0 = 0, I1 = 0, D0 = 0, D1 = 0;
 546:	c1 2c       	mov	r12, r1
 548:	d1 2c       	mov	r13, r1
 54a:	e1 2c       	mov	r14, r1
 54c:	f1 2c       	mov	r15, r1
		ADCOut1 = ADCL|(ADCH<<8);
		ADCOut1 = ADCOut1/4;
		I0 = I1;
		D0 = D1;
		P1 = Kp*ADCOut1;
		I1 = (Ki/100)*(ADCOut1 + ADCOut0) + I0;
 54e:	0f 2e       	mov	r0, r31
 550:	f4 e6       	ldi	r31, 0x64	; 100
 552:	af 2e       	mov	r10, r31
 554:	b1 2c       	mov	r11, r1
 556:	f0 2d       	mov	r31, r0
		D1 = (Kd*100)*(ADCOut1 - ADCOut0) + D0;
 558:	0f 2e       	mov	r0, r31
 55a:	f4 e6       	ldi	r31, 0x64	; 100
 55c:	8f 2e       	mov	r8, r31
 55e:	f0 2d       	mov	r31, r0
		PORTC = P1 + I1 + D1;
		
		char key = 16;
		PORTB = 0xF0;
 560:	10 ef       	ldi	r17, 0xF0	; 240
		
		PORTB = 0b11100000;
 562:	0f 2e       	mov	r0, r31
 564:	f0 ee       	ldi	r31, 0xE0	; 224
 566:	9f 2e       	mov	r9, r31
 568:	f0 2d       	mov	r31, r0
		P1 = Kp*ADCOut1;
		I1 = (Ki/100)*(ADCOut1 + ADCOut0) + I0;
		D1 = (Kd*100)*(ADCOut1 - ADCOut0) + D0;
		PORTC = P1 + I1 + D1;
		
		char key = 16;
 56a:	68 94       	set
 56c:	22 24       	eor	r2, r2
 56e:	24 f8       	bld	r2, 4
		PORTB = 0xF0;
		
		PORTB = 0b11100000;
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 7;
 570:	0f 2e       	mov	r0, r31
 572:	f7 e0       	ldi	r31, 0x07	; 7
 574:	3f 2e       	mov	r3, r31
 576:	f0 2d       	mov	r31, r0
		if(!(PINB & 0b00000010))
		key = 4;
 578:	68 94       	set
 57a:	44 24       	eor	r4, r4
 57c:	42 f8       	bld	r4, 2
		if(!(PINB & 0b00000100))
		key = 1;
 57e:	55 24       	eor	r5, r5
 580:	53 94       	inc	r5
		if(!(PINB & 0b00001000))
		key = 10;
 582:	0f 2e       	mov	r0, r31
 584:	fa e0       	ldi	r31, 0x0A	; 10
 586:	6f 2e       	mov	r6, r31
 588:	f0 2d       	mov	r31, r0
		PORTB = 0b11110000;
		
		PORTB = 0b11010000;
 58a:	00 ed       	ldi	r16, 0xD0	; 208
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 8;
 58c:	68 94       	set
 58e:	77 24       	eor	r7, r7
 590:	73 f8       	bld	r7, 3
 592:	01 c0       	rjmp	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
void Command( unsigned char Cmd );
void LCDCHARACTER( unsigned char DATA );
int Ki, Kdt, Kd,Kpt, Kp, Kit ;

int main()
{
 594:	9e 01       	movw	r18, r28
 596:	8f e3       	ldi	r24, 0x3F	; 63
 598:	9c e9       	ldi	r25, 0x9C	; 156
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
	int ADCOut0 = 0, ADCOut1 = 0;

	while(1)
	{
		_delay_ms(20);
		ADCSRA |= (1<<6);
 5a2:	36 9a       	sbi	0x06, 6	; 6
		while(get_bit(ADCSRA,6) == 1)
 5a4:	36 99       	sbic	0x06, 6	; 6
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		{

		}
		ADCOut0 = ADCOut1;
		ADCOut1 = ADCL|(ADCH<<8);
 5a8:	84 b1       	in	r24, 0x04	; 4
 5aa:	45 b1       	in	r20, 0x05	; 5
		ADCOut1 = ADCOut1/4;
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	94 2b       	or	r25, r20
 5b0:	ec 01       	movw	r28, r24
 5b2:	dd 23       	and	r29, r29
 5b4:	0c f4       	brge	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b6:	23 96       	adiw	r28, 0x03	; 3
 5b8:	d5 95       	asr	r29
 5ba:	c7 95       	ror	r28
 5bc:	d5 95       	asr	r29
 5be:	c7 95       	ror	r28
		I0 = I1;
		D0 = D1;
		P1 = Kp*ADCOut1;
		I1 = (Ki/100)*(ADCOut1 + ADCOut0) + I0;
 5c0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <Ki>
 5c4:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <Ki+0x1>
 5c8:	b5 01       	movw	r22, r10
 5ca:	0e 94 13 04 	call	0x826	; 0x826 <__divmodhi4>
 5ce:	a9 01       	movw	r20, r18
 5d0:	4c 0f       	add	r20, r28
 5d2:	5d 1f       	adc	r21, r29
 5d4:	64 9f       	mul	r22, r20
 5d6:	c0 01       	movw	r24, r0
 5d8:	65 9f       	mul	r22, r21
 5da:	90 0d       	add	r25, r0
 5dc:	74 9f       	mul	r23, r20
 5de:	90 0d       	add	r25, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	e8 0e       	add	r14, r24
 5e4:	f9 1e       	adc	r15, r25
		D1 = (Kd*100)*(ADCOut1 - ADCOut0) + D0;
 5e6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Kd>
 5ea:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Kd+0x1>
 5ee:	88 9e       	mul	r8, r24
 5f0:	a0 01       	movw	r20, r0
 5f2:	89 9e       	mul	r8, r25
 5f4:	50 0d       	add	r21, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	fe 01       	movw	r30, r28
 5fa:	e2 1b       	sub	r30, r18
 5fc:	f3 0b       	sbc	r31, r19
 5fe:	4e 9f       	mul	r20, r30
 600:	c0 01       	movw	r24, r0
 602:	4f 9f       	mul	r20, r31
 604:	90 0d       	add	r25, r0
 606:	5e 9f       	mul	r21, r30
 608:	90 0d       	add	r25, r0
 60a:	11 24       	eor	r1, r1
 60c:	c8 0e       	add	r12, r24
 60e:	d9 1e       	adc	r13, r25
		PORTC = P1 + I1 + D1;
 610:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <Kp>
 614:	8e 2d       	mov	r24, r14
 616:	8c 0d       	add	r24, r12
 618:	c9 9f       	mul	r28, r25
 61a:	80 0d       	add	r24, r0
 61c:	11 24       	eor	r1, r1
 61e:	85 bb       	out	0x15, r24	; 21
		
		char key = 16;
		PORTB = 0xF0;
 620:	18 bb       	out	0x18, r17	; 24
		
		PORTB = 0b11100000;
 622:	98 ba       	out	0x18, r9	; 24
 624:	8f e9       	ldi	r24, 0x9F	; 159
 626:	9f e0       	ldi	r25, 0x0F	; 15
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62e:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 630:	b0 99       	sbic	0x16, 0	; 22
 632:	02 c0       	rjmp	.+4      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
		key = 7;
 634:	83 2d       	mov	r24, r3
 636:	01 c0       	rjmp	.+2      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
		P1 = Kp*ADCOut1;
		I1 = (Ki/100)*(ADCOut1 + ADCOut0) + I0;
		D1 = (Kd*100)*(ADCOut1 - ADCOut0) + D0;
		PORTC = P1 + I1 + D1;
		
		char key = 16;
 638:	82 2d       	mov	r24, r2
		
		PORTB = 0b11100000;
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 7;
		if(!(PINB & 0b00000010))
 63a:	b1 9b       	sbis	0x16, 1	; 22
		key = 4;
 63c:	84 2d       	mov	r24, r4
		if(!(PINB & 0b00000100))
 63e:	b2 9b       	sbis	0x16, 2	; 22
		key = 1;
 640:	85 2d       	mov	r24, r5
		if(!(PINB & 0b00001000))
 642:	b3 9b       	sbis	0x16, 3	; 22
		key = 10;
 644:	86 2d       	mov	r24, r6
		PORTB = 0b11110000;
 646:	18 bb       	out	0x18, r17	; 24
		
		PORTB = 0b11010000;
 648:	08 bb       	out	0x18, r16	; 24
 64a:	ef e9       	ldi	r30, 0x9F	; 159
 64c:	ff e0       	ldi	r31, 0x0F	; 15
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 654:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 656:	b0 9b       	sbis	0x16, 0	; 22
		key = 8;
 658:	87 2d       	mov	r24, r7
		if(!(PINB & 0b00000010))
 65a:	b1 9b       	sbis	0x16, 1	; 22
		key = 5;
 65c:	85 e0       	ldi	r24, 0x05	; 5
		if(!(PINB & 0b00000100))
 65e:	b2 9b       	sbis	0x16, 2	; 22
		key = 2;
 660:	82 e0       	ldi	r24, 0x02	; 2
		if(!(PINB & 0b00001000))
 662:	b3 9b       	sbis	0x16, 3	; 22
		key = 0;
 664:	80 e0       	ldi	r24, 0x00	; 0
		PORTB = 0b11110000;
 666:	18 bb       	out	0x18, r17	; 24
		
		PORTB = 0b10110000;
 668:	90 eb       	ldi	r25, 0xB0	; 176
 66a:	98 bb       	out	0x18, r25	; 24
 66c:	ef e9       	ldi	r30, 0x9F	; 159
 66e:	ff e0       	ldi	r31, 0x0F	; 15
 670:	31 97       	sbiw	r30, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 674:	00 c0       	rjmp	.+0      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 676:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 678:	b0 9b       	sbis	0x16, 0	; 22
		key = 9;
 67a:	89 e0       	ldi	r24, 0x09	; 9
		if(!(PINB & 0b00000010))
 67c:	b1 9b       	sbis	0x16, 1	; 22
		key = 6;
 67e:	86 e0       	ldi	r24, 0x06	; 6
		if(!(PINB & 0b00000100))
 680:	b2 9b       	sbis	0x16, 2	; 22
		key = 3;
 682:	83 e0       	ldi	r24, 0x03	; 3
		if(!(PINB & 0b00001000))
 684:	b3 9b       	sbis	0x16, 3	; 22
		key = 11;
 686:	8b e0       	ldi	r24, 0x0B	; 11
		PORTB = 0b11110000;
 688:	18 bb       	out	0x18, r17	; 24
		
		PORTB = 0b01110000;
 68a:	90 e7       	ldi	r25, 0x70	; 112
 68c:	98 bb       	out	0x18, r25	; 24
 68e:	ef e9       	ldi	r30, 0x9F	; 159
 690:	ff e0       	ldi	r31, 0x0F	; 15
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 696:	00 c0       	rjmp	.+0      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 698:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 69a:	b0 9b       	sbis	0x16, 0	; 22
		key = 12;
 69c:	8c e0       	ldi	r24, 0x0C	; 12
		if(!(PINB & 0b00000010))
 69e:	b1 9b       	sbis	0x16, 1	; 22
		key = 13;
 6a0:	8d e0       	ldi	r24, 0x0D	; 13
		if(!(PINB & 0b00000100))
 6a2:	b2 9b       	sbis	0x16, 2	; 22
 6a4:	12 c0       	rjmp	.+36     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		key = 14;
		if(!(PINB & 0b00001000))
 6a6:	b3 9b       	sbis	0x16, 3	; 22
 6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		key = 15;
		PORTB = 0b11110000;
 6aa:	18 bb       	out	0x18, r17	; 24
		if (key == 10) main();
 6ac:	8a 30       	cpi	r24, 0x0A	; 10
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b0:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
		if (key == 11) Timer();
 6b4:	8b 30       	cpi	r24, 0x0B	; 11
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b8:	6d cf       	rjmp	.-294    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 6ba:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Timer>
 6be:	6a cf       	rjmp	.-300    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
		key = 13;
		if(!(PINB & 0b00000100))
		key = 14;
		if(!(PINB & 0b00001000))
		key = 15;
		PORTB = 0b11110000;
 6c0:	18 bb       	out	0x18, r17	; 24
 6c2:	68 cf       	rjmp	.-304    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 6c4:	18 bb       	out	0x18, r17	; 24
		if(!(PINB & 0b00000001))
		key = 12;
		if(!(PINB & 0b00000010))
		key = 13;
		if(!(PINB & 0b00000100))
		key = 14;
 6c6:	8e e0       	ldi	r24, 0x0E	; 14
 6c8:	f5 cf       	rjmp	.-22     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
		if(!(PINB & 0b00001000))
 6ca:	b3 9b       	sbis	0x16, 3	; 22
 6cc:	f9 cf       	rjmp	.-14     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6ce:	fa cf       	rjmp	.-12     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>

000006d0 <keyboard>:

	}
}

char keyboard()
{
 6d0:	7f 92       	push	r7
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
	char key = 16;
	while(1)
	{
		PORTB = 0xF0;
 6ea:	80 ef       	ldi	r24, 0xF0	; 240
		
		PORTB = 0b11100000;
 6ec:	40 ee       	ldi	r20, 0xE0	; 224
 6ee:	68 94       	set
 6f0:	bb 24       	eor	r11, r11
 6f2:	b4 f8       	bld	r11, 4
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 7;
 6f4:	0f 2e       	mov	r0, r31
 6f6:	f7 e0       	ldi	r31, 0x07	; 7
 6f8:	cf 2e       	mov	r12, r31
 6fa:	f0 2d       	mov	r31, r0
		if(!(PINB & 0b00000010))
		key = 4;
 6fc:	68 94       	set
 6fe:	dd 24       	eor	r13, r13
 700:	d2 f8       	bld	r13, 2
		if(!(PINB & 0b00000100))
		key = 1;
 702:	ee 24       	eor	r14, r14
 704:	e3 94       	inc	r14
		if(!(PINB & 0b00001000))
		key = 10;
 706:	0f 2e       	mov	r0, r31
 708:	fa e0       	ldi	r31, 0x0A	; 10
 70a:	ff 2e       	mov	r15, r31
 70c:	f0 2d       	mov	r31, r0
		PORTB = 0b11110000;
		
		PORTB = 0b11010000;
 70e:	30 ed       	ldi	r19, 0xD0	; 208
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 8;
 710:	08 e0       	ldi	r16, 0x08	; 8
		if(!(PINB & 0b00000010))
		key = 5;
 712:	15 e0       	ldi	r17, 0x05	; 5
		if(!(PINB & 0b00000100))
		key = 2;
 714:	68 94       	set
 716:	99 24       	eor	r9, r9
 718:	91 f8       	bld	r9, 1
		if(!(PINB & 0b00001000))
		key = 0;
 71a:	81 2c       	mov	r8, r1
		PORTB = 0b11110000;
		
		PORTB = 0b10110000;
 71c:	20 eb       	ldi	r18, 0xB0	; 176
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 9;
 71e:	0f 2e       	mov	r0, r31
 720:	f9 e0       	ldi	r31, 0x09	; 9
 722:	7f 2e       	mov	r7, r31
 724:	f0 2d       	mov	r31, r0
		if(!(PINB & 0b00000010))
		key = 6;
 726:	f6 e0       	ldi	r31, 0x06	; 6
		if(!(PINB & 0b00000100))
		key = 3;
 728:	e3 e0       	ldi	r30, 0x03	; 3
		if(!(PINB & 0b00001000))
		key = 11;
 72a:	7b e0       	ldi	r23, 0x0B	; 11
		PORTB = 0b11110000;
		
		PORTB = 0b01110000;
 72c:	90 e7       	ldi	r25, 0x70	; 112
		_delay_ms(2);
		if(!(PINB & 0b00000001))
		key = 12;
 72e:	6c e0       	ldi	r22, 0x0C	; 12
		if(!(PINB & 0b00000010))
		key = 13;
 730:	5d e0       	ldi	r21, 0x0D	; 13
		if(!(PINB & 0b00000100))
		key = 14;
 732:	0f 2e       	mov	r0, r31
 734:	fe e0       	ldi	r31, 0x0E	; 14
 736:	af 2e       	mov	r10, r31
 738:	f0 2d       	mov	r31, r0
char keyboard()
{
	char key = 16;
	while(1)
	{
		PORTB = 0xF0;
 73a:	88 bb       	out	0x18, r24	; 24
		
		PORTB = 0b11100000;
 73c:	48 bb       	out	0x18, r20	; 24
 73e:	af e9       	ldi	r26, 0x9F	; 159
 740:	bf e0       	ldi	r27, 0x0F	; 15
 742:	11 97       	sbiw	r26, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <keyboard+0x72>
 746:	00 c0       	rjmp	.+0      	; 0x748 <keyboard+0x78>
 748:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 74a:	b0 99       	sbic	0x16, 0	; 22
 74c:	02 c0       	rjmp	.+4      	; 0x752 <keyboard+0x82>
		key = 7;
 74e:	cc 2d       	mov	r28, r12
 750:	01 c0       	rjmp	.+2      	; 0x754 <keyboard+0x84>
 752:	cb 2d       	mov	r28, r11
		if(!(PINB & 0b00000010))
 754:	b1 9b       	sbis	0x16, 1	; 22
		key = 4;
 756:	cd 2d       	mov	r28, r13
		if(!(PINB & 0b00000100))
 758:	b2 9b       	sbis	0x16, 2	; 22
		key = 1;
 75a:	ce 2d       	mov	r28, r14
		if(!(PINB & 0b00001000))
 75c:	b3 9b       	sbis	0x16, 3	; 22
		key = 10;
 75e:	cf 2d       	mov	r28, r15
		PORTB = 0b11110000;
 760:	88 bb       	out	0x18, r24	; 24
		
		PORTB = 0b11010000;
 762:	38 bb       	out	0x18, r19	; 24
 764:	af e9       	ldi	r26, 0x9F	; 159
 766:	bf e0       	ldi	r27, 0x0F	; 15
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <keyboard+0x98>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <keyboard+0x9e>
 76e:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 770:	b0 9b       	sbis	0x16, 0	; 22
		key = 8;
 772:	c0 2f       	mov	r28, r16
		if(!(PINB & 0b00000010))
 774:	b1 9b       	sbis	0x16, 1	; 22
		key = 5;
 776:	c1 2f       	mov	r28, r17
		if(!(PINB & 0b00000100))
 778:	b2 9b       	sbis	0x16, 2	; 22
		key = 2;
 77a:	c9 2d       	mov	r28, r9
		if(!(PINB & 0b00001000))
 77c:	b3 9b       	sbis	0x16, 3	; 22
		key = 0;
 77e:	c8 2d       	mov	r28, r8
		PORTB = 0b11110000;
 780:	88 bb       	out	0x18, r24	; 24
		
		PORTB = 0b10110000;
 782:	28 bb       	out	0x18, r18	; 24
 784:	af e9       	ldi	r26, 0x9F	; 159
 786:	bf e0       	ldi	r27, 0x0F	; 15
 788:	11 97       	sbiw	r26, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <keyboard+0xb8>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <keyboard+0xbe>
 78e:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 790:	b0 9b       	sbis	0x16, 0	; 22
		key = 9;
 792:	c7 2d       	mov	r28, r7
		if(!(PINB & 0b00000010))
 794:	b1 9b       	sbis	0x16, 1	; 22
		key = 6;
 796:	cf 2f       	mov	r28, r31
		if(!(PINB & 0b00000100))
 798:	b2 9b       	sbis	0x16, 2	; 22
		key = 3;
 79a:	ce 2f       	mov	r28, r30
		if(!(PINB & 0b00001000))
 79c:	b3 9b       	sbis	0x16, 3	; 22
		key = 11;
 79e:	c7 2f       	mov	r28, r23
		PORTB = 0b11110000;
 7a0:	88 bb       	out	0x18, r24	; 24
		
		PORTB = 0b01110000;
 7a2:	98 bb       	out	0x18, r25	; 24
 7a4:	af e9       	ldi	r26, 0x9F	; 159
 7a6:	bf e0       	ldi	r27, 0x0F	; 15
 7a8:	11 97       	sbiw	r26, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <keyboard+0xd8>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <keyboard+0xde>
 7ae:	00 00       	nop
		_delay_ms(2);
		if(!(PINB & 0b00000001))
 7b0:	b0 9b       	sbis	0x16, 0	; 22
		key = 12;
 7b2:	c6 2f       	mov	r28, r22
		if(!(PINB & 0b00000010))
 7b4:	b1 9b       	sbis	0x16, 1	; 22
		key = 13;
 7b6:	c5 2f       	mov	r28, r21
		if(!(PINB & 0b00000100))
 7b8:	b2 9b       	sbis	0x16, 2	; 22
 7ba:	1d c0       	rjmp	.+58     	; 0x7f6 <keyboard+0x126>
		key = 14;
		if(!(PINB & 0b00001000))
 7bc:	b3 9b       	sbis	0x16, 3	; 22
 7be:	14 c0       	rjmp	.+40     	; 0x7e8 <keyboard+0x118>
		key = 15;
		PORTB = 0b11110000;
 7c0:	88 bb       	out	0x18, r24	; 24

		if (key == 10) main();
 7c2:	ca 30       	cpi	r28, 0x0A	; 10
 7c4:	11 f4       	brne	.+4      	; 0x7ca <keyboard+0xfa>
 7c6:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
		if (key == 11) Timer();
 7ca:	cb 30       	cpi	r28, 0x0B	; 11
 7cc:	19 f4       	brne	.+6      	; 0x7d4 <keyboard+0x104>
 7ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Timer>
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <keyboard+0x10a>

		if (key != 16)
 7d4:	c0 31       	cpi	r28, 0x10	; 16
 7d6:	09 f4       	brne	.+2      	; 0x7da <keyboard+0x10a>
 7d8:	b0 cf       	rjmp	.-160    	; 0x73a <keyboard+0x6a>
		{
			if(key < 10)
 7da:	ca 30       	cpi	r28, 0x0A	; 10
 7dc:	78 f4       	brcc	.+30     	; 0x7fc <keyboard+0x12c>
			LCDCHARACTER(48 + key);
 7de:	80 e3       	ldi	r24, 0x30	; 48
 7e0:	8c 0f       	add	r24, r28
 7e2:	0e 94 71 00 	call	0xe2	; 0xe2 <LCDCHARACTER>
 7e6:	0a c0       	rjmp	.+20     	; 0x7fc <keyboard+0x12c>
		key = 13;
		if(!(PINB & 0b00000100))
		key = 14;
		if(!(PINB & 0b00001000))
		key = 15;
		PORTB = 0b11110000;
 7e8:	80 ef       	ldi	r24, 0xF0	; 240
 7ea:	88 bb       	out	0x18, r24	; 24
		if(!(PINB & 0b00000010))
		key = 13;
		if(!(PINB & 0b00000100))
		key = 14;
		if(!(PINB & 0b00001000))
		key = 15;
 7ec:	cf e0       	ldi	r28, 0x0F	; 15
 7ee:	f5 cf       	rjmp	.-22     	; 0x7da <keyboard+0x10a>
		PORTB = 0b11110000;
 7f0:	88 bb       	out	0x18, r24	; 24
		if(!(PINB & 0b00000001))
		key = 12;
		if(!(PINB & 0b00000010))
		key = 13;
		if(!(PINB & 0b00000100))
		key = 14;
 7f2:	ca 2d       	mov	r28, r10
 7f4:	ef cf       	rjmp	.-34     	; 0x7d4 <keyboard+0x104>
		if(!(PINB & 0b00001000))
 7f6:	b3 9b       	sbis	0x16, 3	; 22
 7f8:	f7 cf       	rjmp	.-18     	; 0x7e8 <keyboard+0x118>
 7fa:	fa cf       	rjmp	.-12     	; 0x7f0 <keyboard+0x120>
 7fc:	8f e4       	ldi	r24, 0x4F	; 79
 7fe:	93 ec       	ldi	r25, 0xC3	; 195
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	f1 f7       	brne	.-4      	; 0x800 <keyboard+0x130>
 804:	00 c0       	rjmp	.+0      	; 0x806 <keyboard+0x136>
 806:	00 00       	nop
			_delay_ms(25);
			return key;
			break;
		}
	}
}
 808:	8c 2f       	mov	r24, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ff 90       	pop	r15
 814:	ef 90       	pop	r14
 816:	df 90       	pop	r13
 818:	cf 90       	pop	r12
 81a:	bf 90       	pop	r11
 81c:	af 90       	pop	r10
 81e:	9f 90       	pop	r9
 820:	8f 90       	pop	r8
 822:	7f 90       	pop	r7
 824:	08 95       	ret

00000826 <__divmodhi4>:
 826:	97 fb       	bst	r25, 7
 828:	07 2e       	mov	r0, r23
 82a:	16 f4       	brtc	.+4      	; 0x830 <__divmodhi4+0xa>
 82c:	00 94       	com	r0
 82e:	07 d0       	rcall	.+14     	; 0x83e <__divmodhi4_neg1>
 830:	77 fd       	sbrc	r23, 7
 832:	09 d0       	rcall	.+18     	; 0x846 <__divmodhi4_neg2>
 834:	0e 94 27 04 	call	0x84e	; 0x84e <__udivmodhi4>
 838:	07 fc       	sbrc	r0, 7
 83a:	05 d0       	rcall	.+10     	; 0x846 <__divmodhi4_neg2>
 83c:	3e f4       	brtc	.+14     	; 0x84c <__divmodhi4_exit>

0000083e <__divmodhi4_neg1>:
 83e:	90 95       	com	r25
 840:	81 95       	neg	r24
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <__divmodhi4_neg2>:
 846:	70 95       	com	r23
 848:	61 95       	neg	r22
 84a:	7f 4f       	sbci	r23, 0xFF	; 255

0000084c <__divmodhi4_exit>:
 84c:	08 95       	ret

0000084e <__udivmodhi4>:
 84e:	aa 1b       	sub	r26, r26
 850:	bb 1b       	sub	r27, r27
 852:	51 e1       	ldi	r21, 0x11	; 17
 854:	07 c0       	rjmp	.+14     	; 0x864 <__udivmodhi4_ep>

00000856 <__udivmodhi4_loop>:
 856:	aa 1f       	adc	r26, r26
 858:	bb 1f       	adc	r27, r27
 85a:	a6 17       	cp	r26, r22
 85c:	b7 07       	cpc	r27, r23
 85e:	10 f0       	brcs	.+4      	; 0x864 <__udivmodhi4_ep>
 860:	a6 1b       	sub	r26, r22
 862:	b7 0b       	sbc	r27, r23

00000864 <__udivmodhi4_ep>:
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	5a 95       	dec	r21
 86a:	a9 f7       	brne	.-22     	; 0x856 <__udivmodhi4_loop>
 86c:	80 95       	com	r24
 86e:	90 95       	com	r25
 870:	bc 01       	movw	r22, r24
 872:	cd 01       	movw	r24, r26
 874:	08 95       	ret

00000876 <do_rand>:
 876:	8f 92       	push	r8
 878:	9f 92       	push	r9
 87a:	af 92       	push	r10
 87c:	bf 92       	push	r11
 87e:	cf 92       	push	r12
 880:	df 92       	push	r13
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ec 01       	movw	r28, r24
 88c:	68 81       	ld	r22, Y
 88e:	79 81       	ldd	r23, Y+1	; 0x01
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	9b 81       	ldd	r25, Y+3	; 0x03
 894:	61 15       	cp	r22, r1
 896:	71 05       	cpc	r23, r1
 898:	81 05       	cpc	r24, r1
 89a:	91 05       	cpc	r25, r1
 89c:	21 f4       	brne	.+8      	; 0x8a6 <do_rand+0x30>
 89e:	64 e2       	ldi	r22, 0x24	; 36
 8a0:	79 ed       	ldi	r23, 0xD9	; 217
 8a2:	8b e5       	ldi	r24, 0x5B	; 91
 8a4:	97 e0       	ldi	r25, 0x07	; 7
 8a6:	2d e1       	ldi	r18, 0x1D	; 29
 8a8:	33 ef       	ldi	r19, 0xF3	; 243
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodsi4>
 8b2:	49 01       	movw	r8, r18
 8b4:	5a 01       	movw	r10, r20
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	a7 ea       	ldi	r26, 0xA7	; 167
 8bc:	b1 e4       	ldi	r27, 0x41	; 65
 8be:	0e 94 b6 04 	call	0x96c	; 0x96c <__muluhisi3>
 8c2:	6b 01       	movw	r12, r22
 8c4:	7c 01       	movw	r14, r24
 8c6:	ac ee       	ldi	r26, 0xEC	; 236
 8c8:	b4 ef       	ldi	r27, 0xF4	; 244
 8ca:	a5 01       	movw	r20, r10
 8cc:	94 01       	movw	r18, r8
 8ce:	0e 94 c4 04 	call	0x988	; 0x988 <__mulohisi3>
 8d2:	dc 01       	movw	r26, r24
 8d4:	cb 01       	movw	r24, r22
 8d6:	8c 0d       	add	r24, r12
 8d8:	9d 1d       	adc	r25, r13
 8da:	ae 1d       	adc	r26, r14
 8dc:	bf 1d       	adc	r27, r15
 8de:	b7 ff       	sbrs	r27, 7
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <do_rand+0x72>
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	a1 09       	sbc	r26, r1
 8e6:	b0 48       	sbci	r27, 0x80	; 128
 8e8:	88 83       	st	Y, r24
 8ea:	99 83       	std	Y+1, r25	; 0x01
 8ec:	aa 83       	std	Y+2, r26	; 0x02
 8ee:	bb 83       	std	Y+3, r27	; 0x03
 8f0:	9f 77       	andi	r25, 0x7F	; 127
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	ff 90       	pop	r15
 8f8:	ef 90       	pop	r14
 8fa:	df 90       	pop	r13
 8fc:	cf 90       	pop	r12
 8fe:	bf 90       	pop	r11
 900:	af 90       	pop	r10
 902:	9f 90       	pop	r9
 904:	8f 90       	pop	r8
 906:	08 95       	ret

00000908 <rand_r>:
 908:	0e 94 3b 04 	call	0x876	; 0x876 <do_rand>
 90c:	08 95       	ret

0000090e <rand>:
 90e:	80 e6       	ldi	r24, 0x60	; 96
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 3b 04 	call	0x876	; 0x876 <do_rand>
 916:	08 95       	ret

00000918 <srand>:
 918:	a0 e0       	ldi	r26, 0x00	; 0
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 920:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 924:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 928:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 92c:	08 95       	ret

0000092e <__divmodsi4>:
 92e:	05 2e       	mov	r0, r21
 930:	97 fb       	bst	r25, 7
 932:	1e f4       	brtc	.+6      	; 0x93a <__divmodsi4+0xc>
 934:	00 94       	com	r0
 936:	0e 94 ae 04 	call	0x95c	; 0x95c <__negsi2>
 93a:	57 fd       	sbrc	r21, 7
 93c:	07 d0       	rcall	.+14     	; 0x94c <__divmodsi4_neg2>
 93e:	0e 94 c9 04 	call	0x992	; 0x992 <__udivmodsi4>
 942:	07 fc       	sbrc	r0, 7
 944:	03 d0       	rcall	.+6      	; 0x94c <__divmodsi4_neg2>
 946:	4e f4       	brtc	.+18     	; 0x95a <__divmodsi4_exit>
 948:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__negsi2>

0000094c <__divmodsi4_neg2>:
 94c:	50 95       	com	r21
 94e:	40 95       	com	r20
 950:	30 95       	com	r19
 952:	21 95       	neg	r18
 954:	3f 4f       	sbci	r19, 0xFF	; 255
 956:	4f 4f       	sbci	r20, 0xFF	; 255
 958:	5f 4f       	sbci	r21, 0xFF	; 255

0000095a <__divmodsi4_exit>:
 95a:	08 95       	ret

0000095c <__negsi2>:
 95c:	90 95       	com	r25
 95e:	80 95       	com	r24
 960:	70 95       	com	r23
 962:	61 95       	neg	r22
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__muluhisi3>:
 96c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__umulhisi3>
 970:	a5 9f       	mul	r26, r21
 972:	90 0d       	add	r25, r0
 974:	b4 9f       	mul	r27, r20
 976:	90 0d       	add	r25, r0
 978:	a4 9f       	mul	r26, r20
 97a:	80 0d       	add	r24, r0
 97c:	91 1d       	adc	r25, r1
 97e:	11 24       	eor	r1, r1
 980:	08 95       	ret

00000982 <__mulshisi3>:
 982:	b7 ff       	sbrs	r27, 7
 984:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__muluhisi3>

00000988 <__mulohisi3>:
 988:	0e 94 b6 04 	call	0x96c	; 0x96c <__muluhisi3>
 98c:	82 1b       	sub	r24, r18
 98e:	93 0b       	sbc	r25, r19
 990:	08 95       	ret

00000992 <__udivmodsi4>:
 992:	a1 e2       	ldi	r26, 0x21	; 33
 994:	1a 2e       	mov	r1, r26
 996:	aa 1b       	sub	r26, r26
 998:	bb 1b       	sub	r27, r27
 99a:	fd 01       	movw	r30, r26
 99c:	0d c0       	rjmp	.+26     	; 0x9b8 <__udivmodsi4_ep>

0000099e <__udivmodsi4_loop>:
 99e:	aa 1f       	adc	r26, r26
 9a0:	bb 1f       	adc	r27, r27
 9a2:	ee 1f       	adc	r30, r30
 9a4:	ff 1f       	adc	r31, r31
 9a6:	a2 17       	cp	r26, r18
 9a8:	b3 07       	cpc	r27, r19
 9aa:	e4 07       	cpc	r30, r20
 9ac:	f5 07       	cpc	r31, r21
 9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__udivmodsi4_ep>
 9b0:	a2 1b       	sub	r26, r18
 9b2:	b3 0b       	sbc	r27, r19
 9b4:	e4 0b       	sbc	r30, r20
 9b6:	f5 0b       	sbc	r31, r21

000009b8 <__udivmodsi4_ep>:
 9b8:	66 1f       	adc	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 1f       	adc	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	1a 94       	dec	r1
 9c2:	69 f7       	brne	.-38     	; 0x99e <__udivmodsi4_loop>
 9c4:	60 95       	com	r22
 9c6:	70 95       	com	r23
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	9b 01       	movw	r18, r22
 9ce:	ac 01       	movw	r20, r24
 9d0:	bd 01       	movw	r22, r26
 9d2:	cf 01       	movw	r24, r30
 9d4:	08 95       	ret

000009d6 <__umulhisi3>:
 9d6:	a2 9f       	mul	r26, r18
 9d8:	b0 01       	movw	r22, r0
 9da:	b3 9f       	mul	r27, r19
 9dc:	c0 01       	movw	r24, r0
 9de:	a3 9f       	mul	r26, r19
 9e0:	70 0d       	add	r23, r0
 9e2:	81 1d       	adc	r24, r1
 9e4:	11 24       	eor	r1, r1
 9e6:	91 1d       	adc	r25, r1
 9e8:	b2 9f       	mul	r27, r18
 9ea:	70 0d       	add	r23, r0
 9ec:	81 1d       	adc	r24, r1
 9ee:	11 24       	eor	r1, r1
 9f0:	91 1d       	adc	r25, r1
 9f2:	08 95       	ret

000009f4 <_exit>:
 9f4:	f8 94       	cli

000009f6 <__stop_program>:
 9f6:	ff cf       	rjmp	.-2      	; 0x9f6 <__stop_program>
